// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package genthrift

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type DemoService interface {
  // Parameters:
  //  - Arg
  EchoBool(ctx context.Context, arg bool) (r bool, err error)
  // Parameters:
  //  - Arg
  EchoByte(ctx context.Context, arg int8) (r int8, err error)
  // Parameters:
  //  - Arg
  EchoI16(ctx context.Context, arg int16) (r int16, err error)
  // Parameters:
  //  - Arg
  EchoI32(ctx context.Context, arg int32) (r int32, err error)
  // Parameters:
  //  - Arg
  EchoI64(ctx context.Context, arg int64) (r int64, err error)
  // Parameters:
  //  - Arg
  EchoDouble(ctx context.Context, arg float64) (r float64, err error)
  // Parameters:
  //  - Arg
  EchoString(ctx context.Context, arg string) (r string, err error)
}

type DemoServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewDemoService instead
func NewDemoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DemoServiceClient {
  return &DemoServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewDemoService instead
func NewDemoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DemoServiceClient {
  return &DemoServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewDemoServiceClient(c thrift.TClient) *DemoServiceClient {
  return &DemoServiceClient{
    c: c,
  }
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoBool(ctx context.Context, arg bool) (r bool, err error) {
  var _args0 DemoServiceEchoBoolArgs
  _args0.Arg = arg
  var _result1 DemoServiceEchoBoolResult
  if err = p.c.Call(ctx, "echoBool", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoByte(ctx context.Context, arg int8) (r int8, err error) {
  var _args2 DemoServiceEchoByteArgs
  _args2.Arg = arg
  var _result3 DemoServiceEchoByteResult
  if err = p.c.Call(ctx, "echoByte", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoI16(ctx context.Context, arg int16) (r int16, err error) {
  var _args4 DemoServiceEchoI16Args
  _args4.Arg = arg
  var _result5 DemoServiceEchoI16Result
  if err = p.c.Call(ctx, "echoI16", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoI32(ctx context.Context, arg int32) (r int32, err error) {
  var _args6 DemoServiceEchoI32Args
  _args6.Arg = arg
  var _result7 DemoServiceEchoI32Result
  if err = p.c.Call(ctx, "echoI32", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoI64(ctx context.Context, arg int64) (r int64, err error) {
  var _args8 DemoServiceEchoI64Args
  _args8.Arg = arg
  var _result9 DemoServiceEchoI64Result
  if err = p.c.Call(ctx, "echoI64", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoDouble(ctx context.Context, arg float64) (r float64, err error) {
  var _args10 DemoServiceEchoDoubleArgs
  _args10.Arg = arg
  var _result11 DemoServiceEchoDoubleResult
  if err = p.c.Call(ctx, "echoDouble", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Arg
func (p *DemoServiceClient) EchoString(ctx context.Context, arg string) (r string, err error) {
  var _args12 DemoServiceEchoStringArgs
  _args12.Arg = arg
  var _result13 DemoServiceEchoStringResult
  if err = p.c.Call(ctx, "echoString", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

type DemoServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler DemoService
}

func (p *DemoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *DemoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *DemoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewDemoServiceProcessor(handler DemoService) *DemoServiceProcessor {

  self14 := &DemoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self14.processorMap["echoBool"] = &demoServiceProcessorEchoBool{handler:handler}
  self14.processorMap["echoByte"] = &demoServiceProcessorEchoByte{handler:handler}
  self14.processorMap["echoI16"] = &demoServiceProcessorEchoI16{handler:handler}
  self14.processorMap["echoI32"] = &demoServiceProcessorEchoI32{handler:handler}
  self14.processorMap["echoI64"] = &demoServiceProcessorEchoI64{handler:handler}
  self14.processorMap["echoDouble"] = &demoServiceProcessorEchoDouble{handler:handler}
  self14.processorMap["echoString"] = &demoServiceProcessorEchoString{handler:handler}
return self14
}

func (p *DemoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x15 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x15.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x15

}

type demoServiceProcessorEchoBool struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoBool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoBoolArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoBoolResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.EchoBool(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoBool: " + err2.Error())
    oprot.WriteMessageBegin("echoBool", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoBool", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type demoServiceProcessorEchoByte struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoByte) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoByteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoByteResult{}
var retval int8
  var err2 error
  if retval, err2 = p.handler.EchoByte(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoByte: " + err2.Error())
    oprot.WriteMessageBegin("echoByte", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoByte", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type demoServiceProcessorEchoI16 struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoI16) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoI16Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoI16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoI16Result{}
var retval int16
  var err2 error
  if retval, err2 = p.handler.EchoI16(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoI16: " + err2.Error())
    oprot.WriteMessageBegin("echoI16", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoI16", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type demoServiceProcessorEchoI32 struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoI32) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoI32Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoI32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoI32Result{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.EchoI32(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoI32: " + err2.Error())
    oprot.WriteMessageBegin("echoI32", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoI32", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type demoServiceProcessorEchoI64 struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoI64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoI64Result{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.EchoI64(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoI64: " + err2.Error())
    oprot.WriteMessageBegin("echoI64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoI64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type demoServiceProcessorEchoDouble struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoDouble) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoDoubleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoDouble", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoDoubleResult{}
var retval float64
  var err2 error
  if retval, err2 = p.handler.EchoDouble(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoDouble: " + err2.Error())
    oprot.WriteMessageBegin("echoDouble", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoDouble", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type demoServiceProcessorEchoString struct {
  handler DemoService
}

func (p *demoServiceProcessorEchoString) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DemoServiceEchoStringArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("echoString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DemoServiceEchoStringResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.EchoString(ctx, args.Arg); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echoString: " + err2.Error())
    oprot.WriteMessageBegin("echoString", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("echoString", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Arg
type DemoServiceEchoBoolArgs struct {
  Arg bool `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoBoolArgs() *DemoServiceEchoBoolArgs {
  return &DemoServiceEchoBoolArgs{}
}


func (p *DemoServiceEchoBoolArgs) GetArg() bool {
  return p.Arg
}
func (p *DemoServiceEchoBoolArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoBoolArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *DemoServiceEchoBoolArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoBool_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoBoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteBool(bool(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoBoolArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoBoolArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoBoolResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoBoolResult() *DemoServiceEchoBoolResult {
  return &DemoServiceEchoBoolResult{}
}

var DemoServiceEchoBoolResult_Success_DEFAULT bool
func (p *DemoServiceEchoBoolResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return DemoServiceEchoBoolResult_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoBoolResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoBoolResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoBoolResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DemoServiceEchoBoolResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoBool_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoBoolResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoBoolResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoBoolResult(%+v)", *p)
}

// Attributes:
//  - Arg
type DemoServiceEchoByteArgs struct {
  Arg int8 `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoByteArgs() *DemoServiceEchoByteArgs {
  return &DemoServiceEchoByteArgs{}
}


func (p *DemoServiceEchoByteArgs) GetArg() int8 {
  return p.Arg
}
func (p *DemoServiceEchoByteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoByteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.Arg = temp
}
  return nil
}

func (p *DemoServiceEchoByteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoByte_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoByteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteByte(int8(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoByteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoByteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoByteResult struct {
  Success *int8 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoByteResult() *DemoServiceEchoByteResult {
  return &DemoServiceEchoByteResult{}
}

var DemoServiceEchoByteResult_Success_DEFAULT int8
func (p *DemoServiceEchoByteResult) GetSuccess() int8 {
  if !p.IsSetSuccess() {
    return DemoServiceEchoByteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoByteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoByteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoByteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := int8(v)
  p.Success = &temp
}
  return nil
}

func (p *DemoServiceEchoByteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoByte_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoByteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteByte(int8(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoByteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoByteResult(%+v)", *p)
}

// Attributes:
//  - Arg
type DemoServiceEchoI16Args struct {
  Arg int16 `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoI16Args() *DemoServiceEchoI16Args {
  return &DemoServiceEchoI16Args{}
}


func (p *DemoServiceEchoI16Args) GetArg() int16 {
  return p.Arg
}
func (p *DemoServiceEchoI16Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoI16Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *DemoServiceEchoI16Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoI16_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoI16Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteI16(int16(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoI16Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoI16Args(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoI16Result struct {
  Success *int16 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoI16Result() *DemoServiceEchoI16Result {
  return &DemoServiceEchoI16Result{}
}

var DemoServiceEchoI16Result_Success_DEFAULT int16
func (p *DemoServiceEchoI16Result) GetSuccess() int16 {
  if !p.IsSetSuccess() {
    return DemoServiceEchoI16Result_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoI16Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoI16Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoI16Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DemoServiceEchoI16Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoI16_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoI16Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I16, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI16(int16(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoI16Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoI16Result(%+v)", *p)
}

// Attributes:
//  - Arg
type DemoServiceEchoI32Args struct {
  Arg int32 `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoI32Args() *DemoServiceEchoI32Args {
  return &DemoServiceEchoI32Args{}
}


func (p *DemoServiceEchoI32Args) GetArg() int32 {
  return p.Arg
}
func (p *DemoServiceEchoI32Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoI32Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *DemoServiceEchoI32Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoI32_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoI32Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteI32(int32(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoI32Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoI32Args(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoI32Result struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoI32Result() *DemoServiceEchoI32Result {
  return &DemoServiceEchoI32Result{}
}

var DemoServiceEchoI32Result_Success_DEFAULT int32
func (p *DemoServiceEchoI32Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return DemoServiceEchoI32Result_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoI32Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoI32Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoI32Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DemoServiceEchoI32Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoI32_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoI32Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoI32Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoI32Result(%+v)", *p)
}

// Attributes:
//  - Arg
type DemoServiceEchoI64Args struct {
  Arg int64 `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoI64Args() *DemoServiceEchoI64Args {
  return &DemoServiceEchoI64Args{}
}


func (p *DemoServiceEchoI64Args) GetArg() int64 {
  return p.Arg
}
func (p *DemoServiceEchoI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *DemoServiceEchoI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoI64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteI64(int64(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoI64Result struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoI64Result() *DemoServiceEchoI64Result {
  return &DemoServiceEchoI64Result{}
}

var DemoServiceEchoI64Result_Success_DEFAULT int64
func (p *DemoServiceEchoI64Result) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return DemoServiceEchoI64Result_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DemoServiceEchoI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoI64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoI64Result(%+v)", *p)
}

// Attributes:
//  - Arg
type DemoServiceEchoDoubleArgs struct {
  Arg float64 `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoDoubleArgs() *DemoServiceEchoDoubleArgs {
  return &DemoServiceEchoDoubleArgs{}
}


func (p *DemoServiceEchoDoubleArgs) GetArg() float64 {
  return p.Arg
}
func (p *DemoServiceEchoDoubleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoDoubleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *DemoServiceEchoDoubleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoDouble_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoDoubleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoDoubleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoDoubleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoDoubleResult struct {
  Success *float64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoDoubleResult() *DemoServiceEchoDoubleResult {
  return &DemoServiceEchoDoubleResult{}
}

var DemoServiceEchoDoubleResult_Success_DEFAULT float64
func (p *DemoServiceEchoDoubleResult) GetSuccess() float64 {
  if !p.IsSetSuccess() {
    return DemoServiceEchoDoubleResult_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoDoubleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoDoubleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoDoubleResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DemoServiceEchoDoubleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoDouble_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoDoubleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.DOUBLE, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoDoubleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoDoubleResult(%+v)", *p)
}

// Attributes:
//  - Arg
type DemoServiceEchoStringArgs struct {
  Arg string `thrift:"arg,1,required" db:"arg" json:"arg"`
}

func NewDemoServiceEchoStringArgs() *DemoServiceEchoStringArgs {
  return &DemoServiceEchoStringArgs{}
}


func (p *DemoServiceEchoStringArgs) GetArg() string {
  return p.Arg
}
func (p *DemoServiceEchoStringArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetArg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetArg = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetArg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Arg is not set"));
  }
  return nil
}

func (p *DemoServiceEchoStringArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Arg = v
}
  return nil
}

func (p *DemoServiceEchoStringArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoString_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoStringArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("arg", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arg: ", p), err) }
  if err := oprot.WriteString(string(p.Arg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.arg (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arg: ", p), err) }
  return err
}

func (p *DemoServiceEchoStringArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoStringArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DemoServiceEchoStringResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDemoServiceEchoStringResult() *DemoServiceEchoStringResult {
  return &DemoServiceEchoStringResult{}
}

var DemoServiceEchoStringResult_Success_DEFAULT string
func (p *DemoServiceEchoStringResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return DemoServiceEchoStringResult_Success_DEFAULT
  }
return *p.Success
}
func (p *DemoServiceEchoStringResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DemoServiceEchoStringResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DemoServiceEchoStringResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DemoServiceEchoStringResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("echoString_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DemoServiceEchoStringResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DemoServiceEchoStringResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DemoServiceEchoStringResult(%+v)", *p)
}


